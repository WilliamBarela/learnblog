---
layout: post
title:  "The long and winding road..."
date:   2017-04-23 09:00:02 -0400
---


The long and winding road that lead me to programming's door is a tale into a fruitful adventure of a lifetime of learning. Of course, in telling such a tale, the difficult part is always knowing where to begin. Perhaps it is best to begin by asking, "what is that first quintessential moment that acted as a spark gap to ignite my passion for software development?". Or, is that too simplistic? Can the birth of a sustained passion for any interest be reduced to a single moment in time? I would like to think not. Instead, I see any such an event as an evolution that results from an innumerable set of less than momentous events, each pushing ever so slightly. These are the microscopic impulses which cause such a passion to coalesce. In that spirit, I will call that moment of transformation of an interest into a passion "the big bang moment".

> Software development is ingrained in my psyche and I hope to not only make a great career out of it, but also to help people and continue to quench my thirst for knowledge while practicing my craft.

I program therefore I am – software development is a natural extension of who I am.



## TL;DR:


![](https://raw.githubusercontent.com/WilliamBarela/WilliamBarela.github.io/master/img/long-winding-road.jpg)I have always been fascinated with systematic and efficient systems. My brain is so deeply hardwired for such systems that the lack of such a system in English spelling led to some of my most frustrating memories as a child. Even at five years of age, learning often seemingly arbitrary spellings of common words was painful. I remember my kindergarten teacher instructing the class on the letters of the English alphabet. Even now, I recall vividly sitting in the third row from the front pondering the dubious assertions of Mrs. Rodriguez that the “a” in “bat” was the short version of that in “bate”. And then, add to that “bait” sound identical to “bate”. I couldn’t understand what cruel and unusual practical joke someone was trying to play on us five-year old’s. Unequivocally, in the years that ensued, learning to spell in English for me was torture. 

In protest, at seven years old I designed a crude alphabet which mostly represented each sound as I heard them with a single symbol. Unfortunately, its cryptographic nature and use of novel symbols limited its use to a few journal notes which I could barely read later because of allophones in English. This is because in the purely phonetic system I designed, words like “bidder” and “bitter” become homographs which are both spelled as “bider”.

Fast forward to my days in college. Now imagine what university is to a person like me who loves that which is systematic. Like a kid in a candy store, it was difficult to know what to choose to study not because anything was boring (except financial accounting), but because too many fields were intriguing to me! Being young, I was also naïve about what research each field of study engaged in. Nevertheless, I knew that I wanted to have a prosperous life and to study something which I could truly engage in each day. Since I had developed such a deep interest in linguistics, and since my parents were business people who kept public policy as a dinner conversation piece, studying Economics and Spanish Linguistics in my undergrad seemed like a good place to start.

In my first semester, I took an Introduction to Computing class taught by Dr. Karen Villaverde at NMSU. We learned about the basics of the hardware of computers, and we also learned some very valuable skills about the Microsoft Office package (Word, Excel, Access, etc.). We also had a very brief introduction to Visual Studio in which we used a template to build a simple GUI which printed “Hello World” to the window. Since at the time my university would take a couple of weeks to publish the cumulative GPA after the final grades were submitted, I decided that I wanted to have a system which students could use to know before that time. So, a few semesters later I used Visual Studio’s templating to create a GUI which would automagically calculate your cumulative GPA based on your grades for the current semester. I even made it so that you could use it before the end of the semester to test what GPA you would get based on the grades in the class. I felt so proud about my work. Although unwittingly this was the first program I ever independently wrote, I thought that all I had done was create a fancy calculator. I showed my work to Dr. Villaverde to thank her for teaching me about Visual Studio. She urged me to consider studying Computer Science, but foolishly I thought that I was too far along in my undergrad to change. I guess that I was also afraid that I would end up working in isolation somewhere in a dark and dusty server room with only machines humming as companions. I was utterly oblivious to software engineering and I mistakenly understood CS as being for server admins.

After graduating, it only took me a few years of working to realize that in business and management there is no shortage of asystematic and inefficient systems in place. This became poignantly clear as a manager in Home Depot when after an annual inventory count I was given a list of over 650 items which needed to have their counts changed in the computer. To do so, I needed to manually search the whole store for facings all of the items so that I could scan the UPC code and change the count to what was listed in the pdf I was given. This was the daunting task that first made me learn how to program systematically. I did not see it feasible to complete this task manually while also completing my other duties. So, I set out to find how to make barcodes programmatically. I read about Python, Ruby, and Perl, but for text processing it seemed that Perl was the best. I found an Apress book in Barnes and Noble on “Beginning Perl” and in a week, I had read nearly all of it. I got my interpreter set up and I hacked together a crude program used a barcode generating library from CPAN and a very rudimentary procedural style program which I made with for loops and regex to grab the UPCs off the pdf after converting it to a text file. The process to complete it was mind bogglingly frustrating. In retrospect, Perl wasn’t the friendliest language to choose as a beginner. But I made it work and the process taught me some of the most crucial fundamentals which still impact my programming today.

I realized that I wanted to go back to school and get into a STEM related field. My wife and I moved to Korea because of her job and because of some unique opportunities I would gain to study in an interdisciplinary STEM related field at the graduate level. During that time, I studied advanced Mathematics, General Physics and Optics. As a graduate student, I studied the design and simulation of photonic circuits. Many of the fundamental relationships which are necessary to complete that work are not easily solved by hand. Others simply cannot be calculated without the assistance of a powerful computer to solve approximations to transcendental equations. It requires the use of either expensive commercial packages, or reading foundational works on the topics and programming in house software. This work and the classes I took solidified my understanding of software development because it forced me to write abstract and reusable programs in Python, R, and Scheme which not only I, but also my team could use. Furthermore, I found that my enjoyment of studying physics arose in great part from being able to later program user friendly interfaces for the equations and algorithms needed to solve complex problems.

I realized through my experience as a graduate student that there are many excellent software packages which have been written to assist physicists and engineers in their work. However, they tend to be of two classes. One, there are very intuitive and user friendly packages that come with an outrageously high price tag that no student can afford. And two, there are very powerful open source packages which are available to all, but that a student must become something of a software engineer to be able to use for basic tasks. And worse yet, there is a serious lack of user friendly programs which exist to assist science students at lower levels or even those who come from a non-traditional background. I see this as something that now I can change going forward. This was my big bang moment: I realized that I can make a change in a place where it matters while also pursuing my passion.

In summary, on this continuum of why I continue to learn about and engage in software development, it is because on this long and winding road, I found my true passion. It was always there, waiting for me to uncover it. But it took the weathering of time and the incessant search for knowledge, efficiency and systematization to uncover it. Software development is ingrained in my psyche and I hope to not only make a great career out of it, but also to help people and continue to quench my thirst for knowledge while practicing my craft.

